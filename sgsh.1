.TH SGSH 1 "19 March 2013"
.\"
.\" (C) Copyright 2013 Diomidis Spinellis.  All rights reserved.
.\"
.\"  Licensed under the Apache License, Version 2.0 (the "License");
.\"  you may not use this file except in compliance with the License.
.\"  You may obtain a copy of the License at
.\"
.\"      http://www.apache.org/licenses/LICENSE-2.0
.\"
.\"  Unless required by applicable law or agreed to in writing, software
.\"  distributed under the License is distributed on an "AS IS" BASIS,
.\"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.\"  See the License for the specific language governing permissions and
.\"  limitations under the License.
.\"
.SH NAME
sgsh \- scatter gather shell
.SH SYNOPSIS
\fBsgsh\fP
[\fB\-g\fP \fIstyle\fP]
[\fB\-kn\fP]
[\fB\-o\fP \fIfile name\fP]
[\fB\-p\fP \fIdirectory\fP]
[\fB\-s\fP \fIshell\fP]
[\fB\-t\fP \fItee command\fP]
[\fIfile\fP]
.SH DESCRIPTION
\fIsgsh\fP will read as input a shell script extended with a scatter-gather operation syntax.
It will produce as output and execute an \fIsh\fP(1)-compatible shell script implementing the
specified operations through named pipes, sockets, and helper programs.

.SH OPTIONS
.IP "\fB\-g\fP \fIstyle\fP"
Instead of creating and executing a shell script,
generate a GraphBiz \fIdot\fP(1) file of the diagram specified by the
input.
The style can be one of the following.
.RS
.IP "plain"
This option gives full details of the program in a spartan black and white graph
drawn in Courier font.
.IP "pretty"
This option reduces details shown in the graph
(command-line arguments), adds colors, and uses the Arial font.
.IP "pretty-full"
This option adds to the graph colors, and uses the Arial font.
.RE
.IP "\fB\-k\fP"
Cause \fIsgsh\fP to keep the generated file in the temporary
directory, instead of deleting it at the end of its execution.

.IP "\fB\-n\fP"
Disable running the generated script.
Instead, \fIsgsh\fP will display the command it would run.

.IP "\fB\-o\fP \fIfile name\fP"
Write the generated script to the specified \fIfile name\fP.
If the file name is `\fB-\fP', then the script will appear on the
\fIsgsh\fP standard output.

.IP "\fB\-p\fP \fIdirectory path\fP"
Use the specified directory path for executing the required helper
programs \fIsgsh-tee\fP(1), \fIsgsh-readval\fP(1), and \fIsgsh-writeval\fP(1).
By specifying `\fB.\fP' as the path, one can execute \fIsgsh\fP programs from
its source code directory,
without installing the shell.

.IP "\fB\-s\fP \fIshell path\fP"
Use the specified path to a shell program for executing the generated
shell script.
By default \fIsgsh\fP will execute \fIsh\fP(1) using the path
\fC/bin/sh\fP.

.IP "\fB\-t\fP \fItee command\fP"
Specify the path for the program to use to distribute the output of
scatter operations to multiple programs.
By default \fIsgsh\fP will use the helper program \fIsgsh-tee\fP(1)
using the system-supplied path,
unless a path is specified using the \fC-p\fP option.


.SH INTER-PROCESS COMMUNICATION
\fISgsh\fP provides three inter-process communication mechanisms.
.PP
\fBScatter blocks\fP send the output of one pipeline ending
with \fC|{\fP into multiple pipelines beginning with \fC-|\fP.
The scatter block is terminated by \fC|}\fP.
Scatter interconnections are internally implemented through
automatically-named pipes, and a helper program,
\fIsgsh-tee\fP(1),
that distributes the data to multiple processes.
The scatter behavior can be modified by adding
\fIsgsh-tee\fP(1) flags after the \fC|{\fP symbol.
.PP
\fBStores\fP, named as \fCstore:\fP\fIname\fP, allow the storage of a data stream's
last record (or of a specified window of records) into a named buffer.
This record can be later retrieved asynchronously by one or more readers.
Data can be piped into a store or out of a store, or it can be read
using the shell's command output substitution syntax.
Stores are implemented internally through Unix-domain sockets,
a writer program, \fIsgsh-write\fP(1), and a reader program, \fIsgsh-read\fP(1).
The behavior of store I/O can be modified by adding
\fIsgsh-writeval\fP(1) and \fIsgsh-readval\fP(1) flags after the store's name.
In particular, this feature can be used to operate on windows of stream data,
rather than a single value written to a store.
.PP
\fBStreams\fP, named as \fC/stream/\fP\fIname\fP, connect the output of one process
with the input of another.
In contrast to scatter blocks,
which restrict the data flow through a tree of processes,
streams allow the specification of a directed acyclic process graph.
Streams require exactly one reader and one writer in order to operate.
Consequently, they should not be used in sequential synchronous steps
specified in the gather block, because steps waiting to be executed
will completely block all upstream processing in the scatter block.
Streams are internally implemented through named pipes.

.SH SYNTAX
.PP
.ft C
program : 'scatter |{' command ... '}| gather |{' pipeline '|}'
        ;

command : source pipeline sink
        ;

source  : '-|'          // Receive scatter input
        | '.|'          // Receive no input
        ;

sink    : '|>/stream/' filename         // Sink to specified stream
        | '|store:' store_name          // Sink to specified store
        | '|{' command ... '|}'         // Scatter
        ;
.ft P
.br

.SH EXAMPLES
.PP
Report file type, length, and compression performance for a
URL retrieved from the web.  The web file never touches the
disk.
.ft C
.nf
#!/usr/local/bin/sgsh

curl -s "$1" |
scatter |{
	-| wc -c |store:NBYTES
	-| file - |store:FILETYPE
	-| compress -c | wc -c |store:COMPRESS
	-| bzip2 -c | wc -c |store:BZIP2
	-| gzip -c | wc -c |store:GZIP
|} gather |{
	cat <<EOF
File URL:      $1
File type:     `store:FILETYPE`
Original size: `store:NBYTES` bytes
compress:      `store:COMPRESS` bytes
gzip:          `store:GZIP` bytes
bzip2:         `store:BZIP2` bytes
EOF
|}
.ft P
.fi
.PP
List the names of duplicate files in the specified directory
.ft C
.nf
#!/usr/local/bin/sgsh

# Create list of files
find "$@" -type f |

# Produce lines of the form
# MD5(filename)= 811bfd4b5974f39e986ddc037e1899e7
xargs openssl md5 |

# Convert each line into a "filename md5sum" pair
sed 's/^MD5(//;s/)= / /' |

# Sort by MD5 sum
sort -k2 |

scatter |{

	 # Print an MD5 sum for each file that appears more than once
	 -| awk '{print $2}' | uniq -d |>/stream/dupes

	 # Pass through the filename md5sum pairs
	 -||>/stream/names

|} gather |{
	# Join the repeated MD5 sums with the corresponding file names
	join -2 2 /stream/dupes /stream/names |
	# Output same files on a single line
	awk '
	BEGIN {ORS=""}
	$1 != prev && prev {print "\n"}
	END {if (prev) print "\n"}
	{if (prev) print " "; prev = $1; print $2}'
|}
.ft P
.fi

.SH "SEE ALSO"
\fIsgsh-tee\fP(1),
\fIsgsh-writeval\fP(1),
\fIsgsh-readval\fP(1)

.SH AUTHOR
Diomidis Spinellis \(em <http://www.spinellis.gr>

.SH BUGS
The transformation of the \fIsgsh\fP script into an \fIsh\fP(1) script
is performed using regular expressions,
and can therefore be thrown off by edge-cases,
like HERE documents containing \fIsgsh\fP syntax.
